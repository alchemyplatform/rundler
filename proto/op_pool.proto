syntax = "proto3";
package op_pool;

message UserOperation {
  bytes sender = 1;
  bytes nonce = 2;
  bytes init_code = 3;
  bytes call_data = 4;
  bytes call_gas_limit = 5;
  bytes verification_gas_limit = 6;
  bytes pre_verification_gas = 7;
  bytes max_fee_per_gas = 8;
  bytes max_priority_fee_per_gas = 9;
  bytes paymaster_and_data = 10;
  bytes signature = 11;
}

service OpPool {
  rpc GetSupportedEntryPoints (GetSupportedEntryPointsRequest) returns (GetSupportedEntryPointsResponse);
  rpc AddOp (AddOpRequest) returns (AddOpResponse);
  rpc GetOps (GetOpsRequest) returns (GetOpsResponse);
  rpc RemoveOps(RemoveOpsRequest) returns (RemoveOpsResponse);

  rpc DebugClearState (DebugClearStateRequest) returns (DebugClearStateResponse);
  rpc DebugDumpMempool (DebugDumpMempoolRequest) returns (DebugDumpMempoolResponse);
  rpc DebugSetReputation (DebugSetReputationRequest) returns (DebugSetReputationResponse);
  rpc DebugDumpReputation (DebugDumpReputationRequest) returns (DebugDumpReputationResponse);
}

message GetSupportedEntryPointsRequest {}
message GetSupportedEntryPointsResponse {
  bytes chain_id = 1;
  repeated bytes entry_points = 2;
}

message AddOpRequest {
  UserOperation op = 1;
  bytes entry_point = 2;
}
message AddOpResponse {
  bytes hash = 1;
}

message GetOpsRequest {
  uint64 max_ops = 1;
  bytes entry_point = 2;
}
message GetOpsResponse {
  repeated UserOperation ops = 1;
}

message RemoveOpsRequest {
  bytes entry_point = 2;
  repeated bytes hashes = 1;
}

message RemoveOpsResponse {}

message DebugClearStateRequest {}
message DebugClearStateResponse {}

message DebugDumpMempoolRequest {
  bytes entry_point = 1;
}
message DebugDumpMempoolResponse {
  repeated UserOperation ops = 1;
}

message DebugSetReputationRequest {
  bytes entry_point = 1;
  Reputation reputation = 2;
}
message DebugSetReputationResponse {}

message DebugDumpReputationRequest {
  bytes entry_point = 1;
}
message DebugDumpReputationResponse {
  repeated Reputation reputations = 1;
}

message Reputation {
  bytes address = 1;
  ReputationStatus status = 2;
  uint64 ops_seen = 3;
  uint64 ops_included = 4;
}

enum ReputationStatus {
  OK = 0;
  THROTTLED = 1;
  BANNED = 2;
}
