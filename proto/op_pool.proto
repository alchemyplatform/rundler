syntax = "proto3";
package op_pool;

message UserOperation {
  bytes sender = 1;
  bytes nonce = 2;
  bytes init_code = 3;
  bytes call_data = 4;
  bytes call_gas_limit = 5;
  bytes verification_gas_limit = 6;
  bytes pre_verification_gas = 7;
  bytes max_fee_per_gas = 8;
  bytes max_priority_fee_per_gas = 9;
  bytes paymaster_and_data = 10;
  bytes signature = 11;
}

enum EntityType {
  ENTITY_TYPE_UNSPECIFIED = 0;
  ENTITY_TYPE_ACCOUNT = 1;
  ENTITY_TYPE_PAYMASTER = 2;
  ENTITY_TYPE_AGGREGATOR = 3;
  ENTITY_TYPE_FACTORY = 4;
}

message Entity {
  EntityType kind = 1;
  bytes address = 2;
}

message MempoolOp {
  UserOperation uo = 1;
  bytes aggregator = 2;
  uint64 valid_after = 3;
  uint64 valid_until = 4;
  bytes expected_code_hash = 5;
  repeated EntityType entities_needing_stake = 6;
  bytes sim_block_hash = 7;
  bool account_is_staked = 8;
}

service OpPool {
  rpc GetSupportedEntryPoints (GetSupportedEntryPointsRequest) returns (GetSupportedEntryPointsResponse);
  rpc AddOp (AddOpRequest) returns (AddOpResponse);
  rpc GetOps (GetOpsRequest) returns (GetOpsResponse);
  rpc RemoveOps(RemoveOpsRequest) returns (RemoveOpsResponse);
  rpc RemoveEntities(RemoveEntitiesRequest) returns (RemoveEntitiesResponse);

  rpc DebugClearState (DebugClearStateRequest) returns (DebugClearStateResponse);
  rpc DebugDumpMempool (DebugDumpMempoolRequest) returns (DebugDumpMempoolResponse);
  rpc DebugSetReputation (DebugSetReputationRequest) returns (DebugSetReputationResponse);
  rpc DebugDumpReputation (DebugDumpReputationRequest) returns (DebugDumpReputationResponse);
}

message GetSupportedEntryPointsRequest {}
message GetSupportedEntryPointsResponse {
  uint64 chain_id = 1;
  repeated bytes entry_points = 2;
}

message AddOpRequest {
  bytes entry_point = 1;
  UserOperation op = 2;
}
message AddOpResponse {
  oneof result {
    AddOpSuccess success = 1;
    AddOpFailure failure = 2;
  }
}

message AddOpSuccess {
  bytes hash = 1;
}

message AddOpFailure {
  MempoolError error = 1;
}

message GetOpsRequest {
  bytes entry_point = 1;
  uint64 max_ops = 2;
}
message GetOpsResponse {
  repeated MempoolOp ops = 1;
}

message RemoveOpsRequest {
  bytes entry_point = 1;
  repeated bytes hashes = 2;
}
message RemoveOpsResponse {}

message RemoveEntitiesRequest {
  bytes entry_point = 1;
  repeated Entity entities = 2;
}
message RemoveEntitiesResponse {}

message DebugClearStateRequest {}
message DebugClearStateResponse {}

message DebugDumpMempoolRequest {
  bytes entry_point = 1;
}
message DebugDumpMempoolResponse {
  repeated MempoolOp ops = 1;
}

message DebugSetReputationRequest {
  bytes entry_point = 1;
  repeated Reputation reputations = 2;
}
message DebugSetReputationResponse {}

message DebugDumpReputationRequest {
  bytes entry_point = 1;
}
message DebugDumpReputationResponse {
  repeated Reputation reputations = 1;
}

message Reputation {
  bytes address = 1;
  ReputationStatus status = 2;
  uint64 ops_seen = 3;
  uint64 ops_included = 4;
}

enum ReputationStatus {
  OK = 0;
  THROTTLED = 1;
  BANNED = 2;
}

// MEMPOOL ERRORS

message MempoolError {
  oneof error {
    string internal = 1;
    ReplacementUnderpricedError replacement_underpriced = 2;
    MaxOperationsReachedError max_operations_reached = 3;
    EntityThrottledError entity_throttled = 4;
    DiscardedOnInsertError discarded_on_insert = 5;
    PrecheckViolationError precheck_violation = 6;
    SimulationViolationError simulation_violation = 7;
    InvalidSignatureError invalid_signature = 8;
    UnsupportedAggregatorError unsupported_aggregator = 9;
  }
}

message ReplacementUnderpricedError {
  bytes current_fee = 1;
  bytes current_priority_fee = 2;
}

message MaxOperationsReachedError {
  uint64 num_ops = 1;
  bytes sender_address = 2;
}

message EntityThrottledError {
  Entity entity = 1;
}

message DiscardedOnInsertError {}

message InvalidSignatureError {}

message UnsupportedAggregatorError {
  bytes aggregator_address = 1;
}

// PRECHECK VIOLATIONS
message PrecheckViolationError {
  oneof violation {
    InitCodeTooShort init_code_too_short = 1;
    SenderIsNotContractAndNoInitCode sender_is_not_contract_and_no_init_code = 2;
    ExistingSenderWithInitCode existing_sender_with_init_code = 3;
    FactoryIsNotContract factory_is_not_contract = 4;
    VerificationGasLimitTooHigh verification_gas_limit_too_high = 5;
    PreVerificationGasTooLow pre_verification_gas_too_low = 6;
    PaymasterTooShort paymaster_too_short = 7;
    PaymasterIsNotContract paymaster_is_not_contract = 8;
    PaymasterDepositTooLow paymaster_deposit_too_low = 9;
    SenderFundsTooLow sender_funds_too_low = 10;
    MaxFeePerGasTooLow max_fee_per_gas_too_low = 11;
    MaxPriorityFeePerGasTooLow max_priority_fee_per_gas_too_low = 12;
    CallGasLimitTooLow call_gas_limit_too_low = 13;
  }
}

message InitCodeTooShort {
  uint64 length = 1;
}

message SenderIsNotContractAndNoInitCode {
  bytes sender_address = 1;
}

message ExistingSenderWithInitCode {
  bytes sender_address = 1;
}

message FactoryIsNotContract {
  bytes factory_address = 1;
}

message VerificationGasLimitTooHigh {
  bytes actual_gas = 1;
  bytes max_gas = 2;
}

message PreVerificationGasTooLow {
  bytes actual_gas = 1;
  bytes min_gas = 2;
}

message PaymasterTooShort {
  uint64 length = 1;
}

message PaymasterIsNotContract {
  bytes paymaster_address = 1;
}

message PaymasterDepositTooLow {
  bytes actual_deposit = 1;
  bytes min_deposit = 2;
}

message SenderFundsTooLow {
  bytes actual_funds = 1;
  bytes min_funds = 2;
}

message MaxFeePerGasTooLow {
  bytes actual_fee = 1;
  bytes min_fee = 2;
}

message MaxPriorityFeePerGasTooLow {
  bytes actual_fee = 1;
  bytes min_fee = 2;
}

message CallGasLimitTooLow {
  bytes actual_gas_limit = 1;
  bytes min_gas_limit = 2;
}

// SIMULATION VIOLATIONS
message SimulationViolationError {
  oneof violation {
    UnintendedRevertWithMessage unintended_revert_with_message = 1;
    UsedForbiddenOpcode used_forbidden_opcode = 2;
    UsedForbiddenPrecompile used_forbidden_precompile = 3;
    FactoryCalledCreate2Twice factory_called_create2_twice = 4;
    InvalidStorageAccess invalid_storage_access = 5;
    NotStaked not_staked = 6;
    UnintendedRevert unintended_revert = 7;
    DidNotRevert did_not_revert = 8;
    WrongNumberOfPhases wrong_number_of_phases = 9;
    CallHadValue call_had_value = 10;
    OutOfGas out_of_gas = 11;
    AccessedUndeployedContract accessed_undeployed_contract = 12;
    CalledBannedEntryPointMethod called_banned_entry_point_method = 13;
    CodeHashChanged code_hash_changed = 14;
    AggregatorValidationFailed aggregator_validation_failed = 15;
  }
}

message UnintendedRevertWithMessage {
  Entity entity = 1;
  string reason = 2;
}

message UsedForbiddenOpcode {
  Entity entity = 1;
  bytes contract_address = 2;
  uint32 opcode = 3;
}

message UsedForbiddenPrecompile {
  Entity entity = 1;
  bytes contract_address = 2;
  bytes precompile_address = 3;
}

message FactoryCalledCreate2Twice {
  bytes factory_address = 1;
}

message InvalidStorageAccess {
  Entity entity = 1;
  bytes contract_address = 2;
  bytes slot = 3;
}

message NotStaked {
  Entity entity = 1;
  bytes min_stake = 2;
  bytes min_unstake_delay = 3;
}

message UnintendedRevert {
  EntityType entity_type = 1;
}

message DidNotRevert {}

message WrongNumberOfPhases {
  uint32 num_phases = 1;
}

message CallHadValue {
  Entity entity = 1;
}

message OutOfGas {
  Entity entity = 1;
}

message AccessedUndeployedContract {
  Entity entity = 1;
  bytes contract_address = 2;
}

message CalledBannedEntryPointMethod {
  Entity entity = 1;
}

message CodeHashChanged {}

message AggregatorValidationFailed {}
