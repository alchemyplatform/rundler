// This file is part of Rundler.
//
// Rundler is free software: you can redistribute it and/or modify it under the
// terms of the GNU Lesser General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later version.
//
// Rundler is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with Rundler.
// If not, see https://www.gnu.org/licenses/.

// Defines the schemas for an ERC-4337 Bundle builder.

syntax = "proto3";

package builder;

enum BundlingMode {
    BUNDLING_MODE_UNSPECIFIED = 0;
    // Test-only bundling mode, should not be used in production. Allows
    // triggering of bundles to be built. See the ERC-4337 spec for more
    // context:
    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-4337.md#-debug_bundler_setbundlingmode
    BUNDLING_MODE_MANUAL = 1;
    // Default bundling mode to auto-build bundles based off of the
    // UserOperations present in the mempool.
    BUNDLING_MODE_AUTO = 2;
}

// Defines the gRPC endpoints for a Builder service
service Builder {
    rpc GetSupportedEntryPoints (GetSupportedEntryPointsRequest) returns (GetSupportedEntryPointsResponse);
    // Forces the bundler to build and execute a bundle from the mempool as handleOps() transaction.
    rpc DebugSendBundleNow(DebugSendBundleNowRequest) returns (DebugSendBundleNowResponse);
    // Sets bundling mode. After setting mode to “manual”, an explicit call to
    // debug_bundler_sendBundleNow is required to send a bundle.
    rpc DebugSetBundlingMode(DebugSetBundlingModeRequest) returns (DebugSetBundlingModeResponse);
}

message GetSupportedEntryPointsRequest {}
message GetSupportedEntryPointsResponse {
    uint64 chain_id = 1;
    repeated bytes entry_points = 2;
}

message DebugSendBundleNowRequest {}

message DebugSendBundleNowResponse {
    oneof result {
        DebugSendBundleNowSuccess success = 1;
        BuilderError failure = 2;
    }
}
message DebugSendBundleNowSuccess {
    bytes transaction_hash = 1;
    uint64 block_number = 2;
}

message DebugSetBundlingModeRequest {
    BundlingMode mode = 1;
}

message DebugSetBundlingModeResponse {
    oneof result {
        DebugSetBundlingModeSuccess success = 1;
        BuilderError failure = 2;
    }
}
message DebugSetBundlingModeSuccess {}

message BuilderError {
    oneof error {
        string internal = 1;
    }
}
